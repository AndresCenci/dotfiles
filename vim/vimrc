call plug#begin('~/.vim/plugged')
  " Some default options preseted
  " (I remove some default config thanks to this)
  Plug 'tpope/vim-sensible' 
  " Linter
  Plug 'w0rp/ale' 
  " theme
  Plug 'sonph/onehalf', {'rtp': 'vim/'}
  " Sintax hlgt
  Plug 'jxnblk/vim-mdx-js'
  Plug 'MaxMEllon/vim-jsx-pretty'
  Plug 'pangloss/vim-javascript'
  Plug 'jparise/vim-graphql'
  Plug 'hail2u/vim-css3-syntax'
  " Comment a motion with gc 
  Plug 'tpope/vim-commentary'
  " files tree
  Plug 'scrooloose/nerdtree'
  Plug 'xuyuanp/nerdtree-git-plugin'
  " search with ctrl-p
  Plug 'ctrlpvim/ctrlp.vim'
  " search in files with ctrl-s ===> needs ack: install via -> brew install ack
  Plug 'dyng/ctrlsf.vim'
  " auto close quotes and brackets
  Plug 'Raimondi/delimitMate'
  " snippets
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
call plug#end()

" Shortcut to open NERDTree
map <C-n> :NERDTreeToggle<CR>

" Open NERDTree automatically when vim starts up on opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Change default arrows for NERDTree
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

" Linter options
let g:ale_linters = {
\   'javascript': ['eslint'],
\}
let g:ale_fixers = {'javascript': ['eslint']}
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
let g:ale_lint_on_save = 0
let g:ale_fix_on_save = 0

" Color options
colorscheme onehalfdark

" Find files ctrlp 
" exclude folders in gitIgnore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_show_hidden = 1 

" remap for ctrl f 
nmap     <C-F>f <Plug>CtrlSFPrompt                  
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath

" Snippets autocomplete config
let g:UltiSnipsExpandTrigger="<tab>"               
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']

" comment lines with ctrl + /
nmap <C-_> :Commentary<CR>
vmap <C-_> :Commentary<CR>


"################### Custon NO-PLUGIN CONFIG ###############

" Turn off highlight match on press enter
nnoremap <CR> :noh<CR><CR>                           

" Search case sensitive only when use Capitals letters to find
:set ignorecase
:set smartcase

"Copy to clipboard on selection+Y
noremap Y "*y   

"navigate panes with ctrl jklh
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" from Ryan florence -> https://gist.github.com/ryanflorence/6d92b7495873263aec0b4e3c299b3bd3
" Keep the error column always visible (jumpy when linter runs on input)
:set signcolumn=yes

"show line number and relative line number
set nu

" Indent using spaces instead of tabs
set expandtab

" Dont wrap lines
set nowrap

" The number of spaces to use for each indent
set shiftwidth=2

" Number of spaces to use for a <Tab> during editing operations
set softtabstop=2

" Airline theme
let g:airline_theme='solarized'
